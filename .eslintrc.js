module.exports = {
    'root': true,
    'parser': '@typescript-eslint/parser',
    'plugins': [
        '@typescript-eslint',
        'react',
        'eslint-plugin-tsdoc',
        'eslint-plugin-react-hooks',
        'jsx-a11y',
        // TODO get the import plugin withing with tsconfig paths
        //'import',
        'jest',
        //'testing-library',
    ],
    'extends': [
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        //'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:react/recommended',
        'plugin:eslint-plugin-react-hooks/recommended',
        'plugin:jsx-a11y/recommended',
        //'plugin:import/errors',
        //'plugin:import/warnings',
        //'plugin:import/typescript',
        'plugin:jest/recommended',
        'plugin:testing-library/recommended',
    ],
    'settings': {
        'react': {
            'version': 'detect',
        },
    //  // 'import/parsers': {
    //  //   '@typescript-eslint/parser': ['.ts', '.tsx']
    //  // },
    //   'import/resolver': {
    //     // use <root>/tsconfig.json
    //     'typescript': {}
    //     //  'project': './config/tsconfig.base.json'
    //     //}
    //   }
    },
    'env': {
        'browser': true,
        'amd': true,
        'node': true,
        'jest/globals': true,
    },
    'rules': {
        'no-sequences': 'warn',
        'require-unicode-regexp': 'warn',
        'array-bracket-newline': ['warn', 'consistent'],
        'jsx-quotes': [ 'error', 'prefer-double' ],
        //'key-spacing': [ 'warn', { 'beforeColon': false, 'afterColon': true }],
        'linebreak-style': [ 'error', 'unix' ],
        'no-multiple-empty-lines': [ 'warn', { 'max': 1, 'maxBOF': 0, 'maxEOF': 0 }],
        'no-trailing-spaces': [ 'warn' ],
        //'quote-props': [ 'warn', 'consistent-as-needed' ],
        'eol-last': [ 'error', 'always' ],
        'no-var': 'error',
        'prefer-const': 'warn',
        'no-useless-rename': 'error',
        'prefer-template': 'warn',

        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/consistent-type-assertions': [ 'error', { 'assertionStyle': 'as' } ],
        '@typescript-eslint/consistent-type-imports': [ 'error', { 'prefer': 'type-imports' } ],
        '@typescript-eslint/consistent-type-definitions': [ 'warn', 'type' ],
        '@typescript-eslint/member-delimiter-style': 'warn',
        '@typescript-eslint/method-signature-style': [ 'error', 'property' ],
        //'@typescript-eslint/naming-convention': [ 'error', { 'format': 'camelCase' } ],
        //'@typescript-eslint/no-floating-promises': 'error',
        //'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'warn',
        //'@typescript-eslint/no-unnecessary-condition': 'warn',
        //'@typescript-eslint/non-nullable-type-assertion-style': 'warn',
        '@typescript-eslint/prefer-as-const': 'warn',
        '@typescript-eslint/prefer-for-of': 'warn',
        '@typescript-eslint/prefer-function-type': 'warn',
        //'@typescript-eslint/prefer-includes': 'warn',
        //'@typescript-eslint/prefer-nullish-coalescing': 'warn',
        '@typescript-eslint/prefer-optional-chain': 'warn',
        //'@typescript-eslint/prefer-readonly': 'warn',
        //'@typescript-eslint/prefer-readonly-parameter-types': 'warn',
        //'@typescript-eslint/prefer-readonly-types': 'warn',
        //'@typescript-eslint/prefer-reduce-type-parameter': 'warn',
        //'@typescript-eslint/prefer-string-starts-ends-with': 'warn',
        //'@typescript-eslint/promise-function-async': 'warn',
        '@typescript-eslint/type-annotation-spacing': 'warn',

        'brace-style': 'off',
        '@typescript-eslint/brace-style': [ 'warn', '1tbs', { 'allowSingleLine': true }],
        'comma-dangle': 'off',
        '@typescript-eslint/comma-dangle': [ 'warn', 'always-multiline' ],
        'comma-spacing': 'off',
        '@typescript-eslint/comma-spacing': [ 'warn', { 'before': false, 'after': true }],
        'default-param-last': 'off',
        '@typescript-eslint/default-param-last': 'error',
        'dot-notation': 'off',
        //'@typescript-eslint/dot-notation': [ 'warn' ],
        'func-call-spacing': 'off',
        '@typescript-eslint/func-call-spacing': [ 'warn', 'never' ],
        'indent': 'off',
        '@typescript-eslint/indent': [ 'error', 4, { 'MemberExpression': 0, 'SwitchCase': 1, 'offsetTernaryExpressions': true }],
        'init-declarations': 'off',
        '@typescript-eslint/init-declarations': 'off',
        'keyword-spacing': 'off',
        '@typescript-eslint/keyword-spacing': [
            'warn',
            {
                'before': true,
                'after': true,
                'overrides': {
                    'if':     { 'after': false },
                    'for':    { 'after': false },
                    'while':  { 'after': false },
                    'catch':  { 'after': false },
                    'switch': { 'after': false },
                },
            },
        ],
        'lines-between-class-members': 'off',
        '@typescript-eslint/lines-between-class-members': [ 'warn', 'always', { 'exceptAfterSingleLine': true }],
        'no-array-constructor': 'off',
        '@typescript-eslint/no-array-constructor': 'warn',
        'no-dupe-class-members': 'off',
        '@typescript-eslint/no-dupe-class-members': 'error',
        'no-duplicate-imports': 'off',
        '@typescript-eslint/no-duplicate-imports': 'error',
        'no-empty-functions': 'off',
        '@typescript-eslint/no-empty-functions': 'off',
        'no-extra-parens': 'off',
        '@typescript-eslint/no-extra-parens': 'off',
        'no-extra-semi': 'off',
        '@typescript-eslint/no-extra-semi': 'warn',
        'no-implied-eval': 'off',
        //'@typescript-eslint/no-implied-eval': 'error',
        'no-invalid-this': 'off',
        '@typescript-eslint/no-invalid-this': 'error',
        'no-loop-func': 'off',
        '@typescript-eslint/no-loop-func': 'warn',
        'no-loss-of-precision': 'off',
        '@typescript-eslint/no-loss-of-precision': 'error',
        'no-magic-numbers': 'off',
        // TODO this is a nice rule, but it seems a little too expansive
        '@typescript-eslint/no-magic-numbers': [ 'off', { 'ignoreEnums': true, 'ignoreNumericLiteralTypes': true, ignoreReadonlyClassProperties: true } ],
        'no-redeclare': 'off',
        '@typescript-eslint/no-redeclare': 'error',
        'no-shadow': 'off',
        '@typescript-eslint/no-shadow': 'warn',
        'no-throw-literal': 'off',
        //'@typescript-eslint/no-throw-literal': 'error',
        'no-unused-expressions': 'off',
        '@typescript-eslint/no-unused-expressions': 'warn',
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': [ 'error', { 'args': 'after-used', 'argsIgnorePattern': '^_', 'varsIgnorePattern': '^_', 'ignoreRestSiblings': true, caughtErrorsIgnorePattern: '^_' }],
        'no-use-before-define': 'off',
        '@typescript-eslint/no-use-before-define': 'off',
        'no-useless-constructor': 'off',
        '@typescript-eslint/no-useless-constructor': 'warn',
        'object-curly-spacing': [ 'warn', 'always' ],
        // TODO it tells me that this rule doesn't exist
        //'@typescript-eslint/object-curly-spacing': [ 'warn', 'always' ],
        'quotes': 'off',
        '@typescript-eslint/quotes': [ 'warn', 'single', { 'avoidEscape': true }],
        'require-await': 'off',
        //'@typescript-eslint/require-await': 'warn',
        'return-await': 'off',
        //'@typescript-eslint/return-await': 'off',
        'semi': 'off',
        '@typescript-eslint/semi': 'warn',
        'space-before-function-paren': 'off',
        '@typescript-eslint/space-before-function-paren': [ 'warn', { 'anonymous': 'never', 'named': 'never', 'asyncArrow': 'always' }],
        'space-infix-ops': 'off',
        '@typescript-eslint/space-infix-ops': 'warn',

        'react/display-name': 'off',
        'react/prop-types': 'off',
        'react-hooks/rules-of-hooks': 'error',
        'react-hooks/exhaustive-deps': 'off',
        //'import/no-unresolved': 'error',
        'jsx-a11y/no-autofocus': 'off',
    },
};
