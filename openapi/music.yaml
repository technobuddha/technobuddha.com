openapi: 3.0.2
info:
  title: Technobuddha API
  version: 0.1.0
  description: >-
    Access the technobuddha music collection
paths:
  /api/music/tracks:
    description: Collection of of all music tracks
    parameters:
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/accept-encoding'
    get:
      description: Get all music tracks
      summary: Get all music tracks
      deprecated: false
      operationId: getTracks
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/music/new-albums:
    description: Collection of of all new albums
    parameters:
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/accept-encoding'
    get:
      description: Get new albums
      summary: Get new albums
      deprecated: false
      operationId: getNewAlbums
      responses:
        '200':
          $ref: '#/components/responses/Albums'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/music/artists:
    description: Collection of of all artists
    parameters:
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/accept-encoding'
    get:
      description: Get artists
      summary: Get artists
      deprecated: false
      operationId: getArtists
      responses:
        '200':
          $ref: '#/components/responses/Artists'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/music/genres:
    description: Collection of of all genres
    parameters:
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/accept-encoding'
    get:
      description: Get genres
      summary: Get genres
      deprecated: false
      operationId: getGenres
      responses:
        '200':
          $ref: '#/components/responses/Genres'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
servers: [{ 'url': 'http://localhost' }]
components:
  schemas:
    Album:
      type: object
      properties:
        artist:
          type: array
          items:
            type: string
        album:
          type: string
        year:
          type: number
        genre:
          type: array
          items:
            type: string
        subgenre:
          type: array
          items:
            type: string
        title:
          type: array
          items:
            type: string
      required:
        - artist
        - album
        - year
        - genre
        - subgenre
        - title
      additionalProperties: false
    Artist:
      type: object
      properties:
        artist:
          type: string
        album:
          type: string
        genre:
          type: array
          items:
            type: string
        subgenre:
          type: array
          items:
            type: string
        year:
          type: number
      required:
        - artist
        - album
        - genre
        - subgenre
        - year
      additionalProperties: false
    Genre:
      type: object
      properties:
        genre:
          type: array
          items:
            type: string
        subgenre:
          type: array
          items:
            type: string
        album:
          type: string
        year:
          type: number
      required:
        - genre
        - subgenre
        - album
        - year
      additionalProperties: false
    Track:
      type: object
      properties:
        content_id:
          type: string
          format: uuid
        artist:
          type: array
          items:
            type: string
        album:
          type: string
        disc_number:
          type: string
        track_number:
          type: string
        title:
          type: string
        genre:
          type: array
          items:
            type: string
      required:
        - artist
        - album
        - disc_number
        - track_number
        - title
        - genre
      additionalProperties: false

    Exception400:
      type: object
      properties:
        exception:
          type: string
          example: BadRequestException
        message:
          type: array
          items:
            type: string
            example: 'Error message'
        statusCode:
          type: number
          example: 400
        timestamp:
          type: string
          format: date-time
          example: '2024-09-16T15:51:29.832Z'
        method:
          type: string
          example: 'POST'
        path:
          type: string
          example: '/households/1234567890'
    Exception500:
      type: object
      properties:
        exception:
          type: string
          example: InternalServerError
        message:
          type: array
          items:
            type: string
        statusCode:
          type: number
          example: 500
        timestamp:
          type: string
          format: date-time
          example: '2024-09-16T15:51:29.832Z'
        method:
          type: string
          example: 'POST'
        path:
          type: string
          example: '/households/1234567890'
  parameters:
    accept:
      name: accept
      in: header
      required: true
      description: 'Acceptable content-types'
      example: application/json
      schema:
        type: string
    'accept-encoding':
      name: accept-encoding
      in: header
      required: false
      description: 'Acceptable content encodings'
      example: gzip, deflate
      schema:
        type: string
  headers:
    ContentType:
      description: The MIME type of the body of the response.
      style: simple
      explode: false
      schema:
        type: string
    CacheControl:
      description: Header used to direct caching done by browsers. Must be set to 'no-store'
      example: no-store
      style: simple
      explode: false
      schema:
        type: string
  responses:
    Albums:
      description: A list of albums
      headers:
        content-type:
          $ref: '#/components/headers/ContentType'
        cache-control:
          $ref: '#/components/headers/CacheControl'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Album'
    Artists:
      description: A list of artists
      headers:
        content-type:
          $ref: '#/components/headers/ContentType'
        cache-control:
          $ref: '#/components/headers/CacheControl'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Artist'
    Genres:
      description: A list of artists
      headers:
        content-type:
          $ref: '#/components/headers/ContentType'
        cache-control:
          $ref: '#/components/headers/CacheControl'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Genre'
    Tracks:
      description: A list of tracks
      headers:
        content-type:
          $ref: '#/components/headers/ContentType'
        cache-control:
          $ref: '#/components/headers/CacheControl'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Track'
    BadRequest:
      description: BAD REQUEST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Exception400'
    NoContent:
      description: NO CONTENT
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Exception500'
