/* eslint-disable @typescript-eslint/no-unnecessary-type-conversion */
import { type Matrix } from '../matrix.ts';

export const matrix: Matrix = {
  // bridge: {
  //   pieces: 1,
  //   // connect: { b: 'e', e: 'b', k: 'm', m: 'k', t: 'r', r: 't', g: 'h', h: 'g', n: 'o', o: 'n' },
  //   connect: { t: 'r', r: 't', b: 'e', e: 'b', f: 'i', i: 'f', k: 'm', m: 'k' },
  //   layouts: {
  //     0: [
  //       { path: ['c', 'n', 's', 'i', 'm'] },
  //       // { path: ['d', 'p', 's', 'i', 'm'] },
  //       { path: ['b', 'h', 'q', 'l', 'r'] },

  //       // { path: ['a', 'k', 'f', 'q', 'o'] },
  //       // { path: ['e', 't', 'o', 'd', 'j'] },
  //     ],
  //     1: [
  //       // { path: ['h', 'o', 'l', 'r', 's'] }
  //     ],
  //     2: [],
  //     3: [],
  //   },
  // },
  directions: [
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
  ],
  pillars: [
    'ab',
    'bc',
    'cd',
    'de',
    'ea',
    'fg',
    'gh',
    'hi',
    'ij',
    'jf',
    'kl',
    'lm',
    'mn',
    'no',
    'ok',
    'pq',
    'qr',
    'rs',
    'st',
    'tp',
  ],
  wall: {
    0: { a: true, b: true, c: true, d: true, e: true },
    1: { f: true, g: true, h: true, i: true, j: true },
    2: { k: true, l: true, m: true, n: true, o: true },
    3: { p: true, q: true, r: true, s: true, t: true },
  },
  opposite: {
    direction: {
      a: 'M',
      b: 'J',
      c: 'O',
      d: 'G',
      e: 'T',
      f: 'S',
      g: 'D',
      h: 'P',
      i: 'K',
      j: 'B',
      k: 'I',
      l: 'T',
      m: 'A',
      n: 'Q',
      o: 'C',
      p: 'H',
      q: 'N',
      r: 'E',
      s: 'F',
      t: 'L',
    },
    facing: {
      A: 'm',
      B: 'j',
      C: 'o',
      D: 'g',
      E: 'r',
      F: 's',
      G: 'd',
      H: 'p',
      I: 'k',
      J: 'b',
      K: 'i',
      L: 't',
      M: 'a',
      N: 'q',
      O: 'c',
      P: 'h',
      Q: 'n',
      R: 'e',
      S: 'f',
      T: 'l',
    },
  },
  rightTurn: {
    A: ['l', 'k', 'o', 'n', 'm'],
    B: ['i', 'h', 'g', 'f', 'j'],
    C: ['n', 'm', 'l', 'k', 'o'],
    D: ['f', 'j', 'i', 'h', 'g'],
    E: ['q', 'p', 't', 's', 'r'],
    F: ['r', 'q', 'p', 't', 's'],
    G: ['c', 'b', 'a', 'e', 'd'],
    H: ['t', 's', 'r', 'q', 'p'],
    I: ['o', 'n', 'm', 'l', 'k'],
    J: ['a', 'e', 'd', 'c', 'b'],
    K: ['h', 'g', 'f', 'j', 'i'],
    L: ['s', 'r', 'q', 'p', 't'],
    M: ['e', 'd', 'c', 'b', 'a'],
    N: ['p', 't', 's', 'r', 'q'],
    O: ['b', 'a', 'e', 'd', 'c'],
    P: ['g', 'f', 'j', 'i', 'h'],
    Q: ['m', 'l', 'k', 'o', 'n'],
    R: ['d', 'c', 'b', 'a', 'e'],
    S: ['j', 'i', 'h', 'g', 'f'],
    T: ['k', 'o', 'n', 'm', 'l'],
  },
  leftTurn: {
    A: ['n', 'o', 'k', 'l', 'm'],
    B: ['f', 'g', 'h', 'i', 'j'],
    C: ['k', 'l', 'm', 'n', 'o'],
    D: ['h', 'i', 'j', 'f', 'g'],
    E: ['s', 't', 'p', 'q', 'r'],
    F: ['t', 'p', 'q', 'r', 's'],
    G: ['e', 'a', 'b', 'c', 'd'],
    H: ['q', 'r', 's', 't', 'p'],
    I: ['l', 'm', 'n', 'o', 'k'],
    J: ['c', 'd', 'e', 'a', 'b'],
    K: ['j', 'f', 'g', 'h', 'i'],
    L: ['p', 'q', 'r', 's', 't'],
    M: ['b', 'c', 'd', 'e', 'a'],
    N: ['r', 's', 't', 'p', 'q'],
    O: ['d', 'e', 'a', 'b', 'c'],
    P: ['i', 'j', 'f', 'g', 'h'],
    Q: ['o', 'k', 'l', 'm', 'n'],
    R: ['a', 'b', 'c', 'd', 'e'],
    S: ['g', 'h', 'i', 'j', 'f'],
    T: ['m', 'n', 'o', 'k', 'l'],
  },
  straight: {
    A: ['k', 'o', 'l', 'n', 'm'],
    B: ['gh', 'fi', 'j'],
    C: ['m', 'n', 'l', 'k', 'o'],
    D: ['i', 'h', 'j', 'f', 'g'],
    E: ['t', 'p', 's', 'q', 'r'],
    F: ['pq', 'rt', 's'],
    G: ['b', 'c', 'a', 'e', 'd'],
    H: ['r', 'q', 's', 't', 'p'],
    I: ['m', 'n', 'l', 'o', 'k'],
    J: ['e', 'd', 'a', 'c', 'b'],
    K: ['f', 'g', 'j', 'h', 'i'],
    L: ['r', 'q', 's', 'p', 't'],
    M: ['dc', 'eb', 'a'],
    N: ['t', 'p', 's', 'r', 'q'],
    O: ['e', 'd', 'a', 'b', 'c'],
    P: ['f', 'g', 'j', 'i', 'h'],
    Q: ['k', 'o', 'l', 'n', 'm'],
    R: ['b', 'c', 'a', 'd', 'e'],
    S: ['i', 'h', 'j', 'g', 'f'],
    T: ['km', 'no', 'l'],
  },
  move: {
    0: {
      a: [
        { x: +0, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
      ],
      b: [
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
      ],
      c: [
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
      ],
      d: [
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
      ],
      e: [
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
      ],
    },
    1: {
      f: [
        { x: +0, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
      ],
      g: [
        { x: +1, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
      ],
      h: [
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
      ],
      i: [
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
      ],
      j: [
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
      ],
    },
    2: {
      k: [
        { x: +1, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
      ],
      l: [
        { x: +1, y: 0 },
        { x: +1, y: 0 },
        { x: +1, y: 0 },
        { x: +1, y: 0 },
        { x: +1, y: 0 },
      ],
      m: [
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
      ],
      n: [
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
        { x: +0, y: +1 },
        { x: -1, y: +1 },
      ],
      o: [
        { x: +0, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
      ],
    },
    3: {
      p: [
        { x: +0, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
        { x: +0, y: -1 },
        { x: -1, y: -1 },
      ],
      q: [
        { x: +1, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
        { x: +1, y: -1 },
        { x: +0, y: -1 },
      ],
      r: [
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
        { x: +1, y: +0 },
      ],
      s: [
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
        { x: +1, y: +1 },
        { x: +0, y: +1 },
      ],
      t: [
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
        { x: -1, y: +0 },
      ],
    },
  },
  preferred: {
    0: ['b', 'c', 'd'],
    1: ['h', 'i', 'j'],
    2: ['l', 'm'],
    3: ['r', 's'],
  },
  angle: {
    a: 270,
    b: 0,
    c: 45,
    d: 135,
    e: 180,
    f: 270,
    g: 315,
    h: 45,
    i: 90,
    j: 180,
    k: 270,
    l: 0,
    m: 90,
    n: 135,
    o: 225,
    p: 225,
    q: 315,
    r: 0,
    s: 90,
    t: 180,
  },
};

export const kindMatrix: number[][] = [
  [0, 1, 2, 3],
  [2, 3, 0, 1],
  [3, 0, 1, 2],
  [1, 2, 3, 0],
  [2, 3, 0, 1],
];

export const offsetXMatrix = [
  [+0.0, +1.0, +2.5, +4.0],
  [+0.5, +2.0, +3.0, +4.0],
  [+0.0, +1.0, +2.0, +3.5],
  [+0.0, +1.5, +3.0, +4.0],
  [-0.5, +1.0, +2.0, +3.0],
];

export const offsetYMatrix = [
  [+0.0, +0.0, +0.0, -0.5],
  [+1.0, +0.5, +1.0, +1.0],
  [+1.5, +2.0, +2.0, +2.0],
  [+3.0, +3.0, +2.5, +3.0],
  [+4.0, +3.5, +4.0, +4.0],
];
